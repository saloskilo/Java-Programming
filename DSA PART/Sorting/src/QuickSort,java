import java.util.Arrays;

public class QuickSort {

    // Public method to sort the array using QuickSort
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index
            int pivotIndex = partition(array, low, high);

            // Recursively sort elements before and after the partition
            quickSort(array, low, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, high);
        }
    }

    // Method to partition the array and find the pivot position
    private static int partition(int[] array, int low, int high) {
        // Choose the rightmost element as the pivot
        int pivot = array[high];

        // Pointer for the greater element
        int i = low - 1;

        // Traverse the array and rearrange elements
        for (int j = low; j < high; j++) {
            // If the current element is smaller than or equal to the pivot
            if (array[j] <= pivot) {
                i++; // Move the smaller element to the correct position

                // Swap array[i] and array[j]
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        // Swap the pivot element with the element at i+1
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        // Return the index of the pivot
        return i + 1;
    }

    // Main method to test the QuickSort
    public static void main(String[] args) {
        int[] array = { 38, 27, 43, 3, 9, 82, 10 };

        // Print the original array
        System.out.println("Original array: " + Arrays.toString(array));

        // Sort the array using QuickSort
        quickSort(array, 0, array.length - 1);

        // Print the sorted array
        System.out.println("Sorted array: " + Arrays.toString(array));
    }
}
